(function($,window,document,undefined){"use strict";const pluginName="swyftCallback",pluginNameLower=pluginName.toLowerCase(),formObjPrefix='sc_',formFieldsPrefix=formObjPrefix+'fld_',inputAllMask='input, select, textarea',defaults={api:{url:'test',custom:[{name:'api_key',value:''},],param:{success:{name:'result',value:'success'},message:'',},},data:{form_method:"post",send_headers:!0,custom_button_data:"",custom_popup_data:"",add_utm_params:!1,utm_params_dictionary:['utm_source','utm_medium','utm_campaign','utm_term','utm_content','keypartner'],},appearance:{custom_button_class:"",custom_button_container_class:"",custom_popup_class:"",show_check_all_agreements:!0,overflown_overlay:!0,ripple_effect:1,show_toggle_button_text:!1,},status:{popup_hidden:!0,popup_body_collapsed:!1,button_disabled:!1,ajax_processing:!1,response_from_api_visible:!0,},text_vars:{popup_title:"Contact form",popup_body:"Leave us your phone number. We'll call you back.",send_button_text:"Send",wrong_input_text:"Wrong input",status_success:"Form sent successfuly",status_sending:"Sending form...",status_error:"Server encountered an error",toggle_button_text:!1,},novalidate:!0,input:{prefix:formObjPrefix,fields:[],agreements:[],check_all_agreements:{obj:null,short:'Check all agreements',},regex_table:{inputmask:{phone:["###-###-###","## ###-##-##","(###)###-####"],email:"*{1,20}[.*{1,20}][.*{1,20}][.*{1,20}]@*{1,20}[.*{2,6}][.*{1,2}]",},'phone':/(\(?(\+|00)?48\)?([ -]?))?(\d{3}[ -]?\d{3}[ -]?\d{3})|([ -]?\d{2}[ -]?\d{3}[ -]?\d{2}[ -]?\d{2})/,'email':/^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/,'name':/^[a-zA-Z\u00E0\u00E1\u00E2\u00E4\u00E3\u00E5\u0105\u010D\u0107\u0119\u00E8\u00E9\u00EA\u00EB\u0117\u012F\u00EC\u00ED\u00EE\u00EF\u0142\u0144\u00F2\u00F3\u00F4\u00F6\u00F5\u00F8\u00F9\u00FA\u00FB\u00FC\u0173\u016B\u00FF\u00FD\u017C\u017A\u00F1\u00E7\u010D\u015B\u0161\u015B\u017E\u00C0\u00C1\u00C2\u00C4\u00C3\u00C5\u0104\u0106\u010C\u0116\u0118\u00C8\u00C9\u00CA\u00CB\u00CC\u00CD\u00CE\u00CF\u012E\u0141\u0143\u00D2\u00D3\u00D4\u00D6\u00D5\u00D8\u00D9\u00DA\u00DB\u00DC\u0172\u016A\u0178\u00DD\u017B\u0179\u00D1\u00DF\u00C7\u0152\u00C6\u010C\u015A\u0160\u015A\u017D\u2202\u00F0 ,.'-]+$/,},data_dictionary:{}},body_content:[],templates:{input:{field:{obj:null,name:'phone',field_name:formObjPrefix+'telephone',label:'Phone number',type:'tel',data_field_type:'phone',placeholder:'000-000-000',value:'',max_length:20,required:!0},agreement:{obj:null,field_name:formObjPrefix+'agreement',type:'checkbox',short:'Lorem',long:'Ipsum',readmore:'More',readless:'Less',required:!0,checked:!0,},},body_content:{short:'Short',long:'Long',readmore:'More',readless:'Less',}},callbacks:{onShow:null,onHide:null,onSend:{success:{function:null,this:this,parameters:null,},error:{function:null,this:this,parameters:null,}}}};function Plugin(element,options){this.element=element;this.$element=$(element);this.settings=$.extend(!0,{},defaults,options);this._defaults=defaults;this._name=pluginName;this._nameLower=pluginNameLower;this._objPrefix=formObjPrefix;this._methods=methods;this._inputAllMask=inputAllMask;this._methods.setDefaultVars(this);this.html=$('html');this.button={obj:null};this.popup={obj:null,form:null,body:null,body_content:null,footer:null};this._methods.init(this)}
    const methods={init:function(instance){instance._methods.initPopup(instance);instance._methods.initButton(instance)},setDefaultVars:function(instance){if(instance.settings.input.fields){const template=instance.settings.templates.input.field;for(let i=0;i<instance.settings.input.fields.length;i++){instance.settings.input.fields[i]=$.extend({},template,instance.settings.input.fields[i])}}
            if(instance.settings.input.agreements){const template=instance.settings.templates.input.agreement;for(let i=0;i<instance.settings.input.agreements.length;i++){instance.settings.input.agreements[i]=$.extend({},template,instance.settings.input.agreements[i])}}
            if(instance.settings.body_content){const template=instance.settings.templates.body_content;for(let i=0;i<instance.settings.body_content.length;i++){instance.settings.body_content[i]=$.extend({},template,instance.settings.body_content[i])}}},formatClasses:function(input){const _input=input;const input_length=_input.length;let output='';if(input){output+=' ';if(input.constructor===Array){for(let i=0;i<input_length;i++){output+=_input[i]+' '}
            if(output[output.length-1]===' '){output=output.slice(0,-1)}}else{output+=_input}}
            return output},initButton:function(instance){instance._methods.initButtonBody(instance);instance._methods.buttonAppendEventListeners(instance)},initButtonBody:function(instance){const buttonClasses=instance._methods.formatClasses(instance.settings.appearance.custom_button_class);const data=instance._methods.formatData(instance.settings.data.custom_button_data);let rippleClass='';switch(instance.settings.appearance.ripple_effect){case 1:rippleClass='ripple';break;case 2:rippleClass='ripple2';break}
            let html='';if(instance.settings.appearance.show_toggle_button_text){const buttonContainerClasses=instance._methods.formatClasses(instance.settings.appearance.custom_button_container_class);html=`
                <div class="${instance._objPrefix+ 'tg_btn_container' + buttonContainerClasses}">
                    <p class="${instance._objPrefix}tg_btn_text">${instance.settings.text_vars.toggle_button_text}</p>
                    
                    <div class="${instance._objPrefix + 'tg_btn' + buttonClasses}" ${data}>
                        <div class="${instance._objPrefix}round_container">
                            <div class="${instance._objPrefix}icon">
                                <a href="#" role="button"></a>
                            </div>
                        </div>
                        <div class="${instance._objPrefix + rippleClass}"></div>
                    </div>
                </div>
                `}else{html=`
                <div class="${instance._objPrefix + 'tg_btn' + buttonClasses}" ${data}>
                    <div class="${instance._objPrefix}round_container">
                        <div class="${instance._objPrefix}icon">
                            <a href="#" role="button"></a>
                        </div>
                    </div>
                    <div class="${instance._objPrefix + rippleClass}"></div>
                </div>
                `}
            const $buttonBody=$(html);instance.button.obj=$buttonBody.appendTo(instance.$element)},buttonAppendEventListeners:function(instance){instance.button.obj.find('a').on('click',function(e){e.preventDefault();instance._methods.TogglePopup(instance)})},initPopup_generate_fields:function(instance,popupBody){let fields='';let dynamic_attributes=[];if(instance.settings.input.fields){const fields_section=popupBody.find('.'+instance._objPrefix+'fields_section');for(let i=0;i<instance.settings.input.fields.length;i++){const field=instance.settings.input.fields[i];dynamic_attributes=[{name:'input',attributes:[{key:'id',value:field.field_name},{key:'name',value:field.field_name},{key:'type',value:field.type},{key:'data-field-type',value:field.data_field_type},{key:'placeholder',value:field.placeholder},{key:'value',value:field.value},{key:'maxlength',value:field.max_length},{key:'required',value:field.required},],formatted:''},];dynamic_attributes=instance._methods.formatDynamicAttributes(dynamic_attributes);const output='<div class="'+instance._objPrefix+'division">\n'+'               <div class="input">\n'+'                   <label for="'+field.field_name+'">'+field.label+'</label>\n'+'                   <input '+dynamic_attributes[0].formatted+'/>\n'+'               </div>\n'+'             </div>\n';fields+=output;const $obj=$(output).appendTo(fields_section);instance.settings.input.fields[i].obj=$obj.find(instance._inputAllMask).first()}}
            return fields},initPopup_generate_popup_agreements:function(instance,popupBody){const agreements_section=popupBody.find('.'+instance._objPrefix+'agreements_section');let agreements='';let output='';let $obj=null;if(instance.settings.input.agreements.length){if(instance.settings.appearance.show_check_all_agreements){output='<div class="'+instance._objPrefix+'division">\n'+'               <div class="input">\n'+'                   <div class="'+instance._objPrefix+'checkbox_container">\n'+'                       <input id="'+instance._objPrefix+'agreement_all" name="'+instance._objPrefix+'agreement_all" type="checkbox" data-field-type="checkbox" />\n'+'                       <button class="checkmark"></button>\n'+'                   </div>\n'+'\n'+'                   <label for="'+instance._objPrefix+'agreement_all">'+instance.settings.input.check_all_agreements.short+'</label>\n'+'               </div>\n'+'          </div>';$obj=$(output).appendTo(agreements_section);instance.settings.input.check_all_agreements.obj=$obj.find(instance._inputAllMask).first()}
            for(let i=0;i<instance.settings.input.agreements.length;i++){const agreement=instance.settings.input.agreements[i];let dynamic_attributes=[];dynamic_attributes=[{name:agreement.field_name,attributes:[{key:'id',value:agreement.field_name},{key:'name',value:agreement.field_name},{key:'type',value:'checkbox'},{key:'value',value:'true'},{key:'data-field-type',value:'checkbox'},],formatted:''},];if(agreement.checked){dynamic_attributes[0].attributes.push({key:'checked',value:'checked'})}
                dynamic_attributes=instance._methods.formatDynamicAttributes(dynamic_attributes);if(typeof agreement.long==='undefined'||agreement.long===''){output='<div class="'+instance._objPrefix+'division">'+'           <div class="input">'+'               <div class="'+instance._objPrefix+'checkbox_container">\n'+'                   <input '+dynamic_attributes[0].formatted+' />\n'+'                   <button class="checkmark"></button>\n'+'               </div>\n'+'\n'+'               <label for="'+agreement.field_name+'">'+agreement.short+'</label>\n'+'           </div>'+'         </div>'}else{output='<div class="'+instance._objPrefix+'division">'+'           <div class="input">'+'               <div class="'+instance._objPrefix+'checkbox_container">\n'+'                   <input '+dynamic_attributes[0].formatted+' />\n'+'                   <button class="checkmark"></button>\n'+'               </div>\n'+'\n'+'               <label for="'+agreement.field_name+'">'+agreement.short+' <button class="'+instance._objPrefix+'readmore">'+agreement.readmore+'</button></label>\n'+'               <div class="'+instance._objPrefix+'readmore_body" style="display: none;">\n'+'                   <span>'+agreement.long+'</span>\n'+'                   <button class="'+instance._objPrefix+'readmore">'+agreement.readless+'</button>\n'+'               </div>'+'           </div>'+'         </div>'}
                agreements+=output;$obj=$(output).appendTo(agreements_section);instance.settings.input.agreements[i].obj=$obj.find(instance._inputAllMask).first()}}
            return agreements},initPopup_generate_popup_body_content:function(instance){const body_content_section=instance.popup.body_content;let body_content_items='';let output='';let $obj=null;if(instance.settings.body_content){for(let i=0;i<instance.settings.body_content.length;i++){const body_content_item=instance.settings.body_content[i];if(typeof body_content_item.long==='undefined'||body_content_item.long===''){output='<div class="'+instance._objPrefix+'division">\n'+'         <p>'+body_content_item.short+'</p>\n'+'    </div>'}else{output='<div class="'+instance._objPrefix+'division">\n'+'         <p>'+body_content_item.short+' <button class="'+instance._objPrefix+'readmore">'+body_content_item.readmore+'</button></p>\n'+'         <div class="'+instance._objPrefix+'readmore_body" style="display: none;">\n'+'             <span>'+body_content_item.long+'</span>\n'+'             <button class="'+instance._objPrefix+'readmore">'+body_content_item.readless+'</button>\n'+'         </div>\n'+'    </div>'}
            body_content_items+=output;$obj=$(output).prependTo(body_content_section);instance.settings.body_content[i].obj=$obj}}
            return body_content_items},initPopup_generate_popup_body:function(instance){let dynamic_attributes=[];const classes=instance._methods.formatClasses(instance.settings.appearance.custom_popup_class);dynamic_attributes=[{name:'form',attributes:[{key:'action',value:instance.settings.api.url},{key:'method',value:instance.settings.data.form_method},{key:'novalidate',value:instance.settings.novalidate},],formatted:''},];dynamic_attributes=instance._methods.formatDynamicAttributes(dynamic_attributes);const overlay='<div class="'+instance._objPrefix+'overlay" style="display: none;">';const popupBody='<div class="'+instance._objPrefix+'popup_container">\n'+'    <div class="'+instance._objPrefix+'popup'+classes+'">\n'+'        <button class="'+instance._objPrefix+'btn_close" type="button"></button>\n'+'        <div class="'+instance._objPrefix+'title_section">\n'+'            <p>'+instance.settings.text_vars.popup_title+'</p>\n'+'        </div>\n'+'\n'+'        <div class="'+instance._objPrefix+'body_section">\n'+'            <p>'+instance.settings.text_vars.popup_body+'</p>\n'+'            <form '+dynamic_attributes[0].formatted+'>\n'+'                <div class="container-fluid no-padding">\n'+'                    <div class="row">\n'+'                        <div class="col-xs-12 '+instance._objPrefix+'fields_section">\n'+'                        </div>\n'+'\n'+'                        <div class="col-xs-12">\n'+'                            <div class="'+instance._objPrefix+'division">\n'+'                                <button type="submit" class="'+instance._objPrefix+'btn btn_submit">'+instance.settings.text_vars.send_button_text+'</button>\n'+'                            </div>\n'+'                        </div>\n'+'                    </div>\n'+'\n'+'                    <div class="row '+instance._objPrefix+'agreements">\n'+'                        <div class="col-xs-12 '+instance._objPrefix+'agreements_section">\n'+'                        </div>\n'+'                    </div>\n'+'                </div>\n'+'            </form>\n'+'            <div class="'+instance._objPrefix+'body_content_section"></div>\n'+'        </div>\n'+'\n'+'        <div class="'+instance._objPrefix+'footer_section">\n'+'\n'+'        </div>\n'+'    </div>\n'+'</div>';const $html=$(overlay).append($(popupBody));return $html},initPopup:function(instance){const $popupBody=$(instance._methods.initPopup_generate_popup_body(instance));instance.popup.overlay=$popupBody.appendTo(instance.$element);instance.popup.obj=instance.popup.overlay.find('.'+instance._objPrefix+'popup');instance.popup.form=instance.popup.obj.find('form');instance.popup.body=instance.popup.obj.find('.'+instance._objPrefix+'body_section');instance.popup.agreements=instance.popup.obj.find('.'+instance._objPrefix+'agreements_section');instance.popup.body_content=instance.popup.obj.find('.'+instance._objPrefix+'body_content_section');instance.popup.footer=instance.popup.obj.find('.'+instance._objPrefix+'footer_section');instance._methods.initPopup_generate_fields(instance,$popupBody);instance._methods.initPopup_generate_popup_agreements(instance,$popupBody);instance._methods.initPopup_generate_popup_body_content(instance);instance._methods.popupAppendEventListeners(instance);instance._methods.popupApplyMisc(instance)},popupAppendEventListeners:function(instance){instance.popup.overlay.on('click',function(){instance._methods.HidePopup(instance)});instance.popup.obj.on('click',function(e){e.stopPropagation()});instance.popup.form.find('.checkmark').on('click',function(e){e.preventDefault();const input=$(this).siblings('input');const is_checked=input.prop('checked');input.prop('checked',!is_checked).trigger('change',[])});instance.popup.obj.find('.'+instance._objPrefix+'readmore').on('click',function(e){e.preventDefault();instance._methods.showReadmore(instance,this)});instance.popup.obj.find('.'+instance._objPrefix+'btn_close').on('click',function(e){e.preventDefault();instance._methods.HidePopup(instance)});for(let i=0;i<instance.settings.input.fields.length;i++){const field=instance.settings.input.fields[i];field.obj.data('index',i);field.obj.on('input',function(e){const index=$(this).data('index');const validated=instance._methods.ValidateForm(instance,[instance.settings.input.fields[index]],{append_status:!1,focus_first_wrong:!1});if(validated){console.log('validation successful')}
            return!1})}
            for(let i=0;i<instance.settings.input.agreements.length;i++){const agreement=instance.settings.input.agreements[i];agreement.obj.data('index',i);agreement.obj.on('change',function(e,_no_check_all_status){const index=$(this).data('index');const validated=instance._methods.ValidateForm(instance,[instance.settings.input.agreements[index]],{append_status:!1,focus_first_wrong:!1});if(validated){console.log('validation successful')}
                if(!_no_check_all_status){instance._methods.input_checkbox_check_all_status(instance)}
                return!1})}
            if(instance.settings.input.check_all_agreements.obj!==null){instance.settings.input.check_all_agreements.obj.on('change',function(e,_no_check_all_status){if(!_no_check_all_status){const is_checked=$(this).prop('checked');for(let i=0;i<instance.settings.input.agreements.length;i++){instance.settings.input.agreements[i].obj.prop('checked',is_checked).trigger('change',[!0])}}})}
            instance._methods.input_checkbox_check_all_status(instance);instance.popup.form.on('submit',function(e){const status=instance._methods.SendData(instance,{callback:{success:{function:instance._methods.SendDataReturn,this:instance,parameters:[instance,{reset_input:!0,message:instance.settings.text_vars.status_success,style:'success'}]},error:{function:instance._methods.SendDataReturn,this:instance,parameters:[instance,{reset_input:!1,message:instance.settings.text_vars.status_error,style:'error'}]}}});console.log('Submit form status: '+status.success+', '+status.message);return!1})},showReadmore:function(instance,obj){const $this=$(obj);$this.closest('.'+instance._objPrefix+'division').find('.'+instance._objPrefix+'readmore_body').slideToggle()},hideReadmore_all:function(instance){const agreements=instance.input.agreements;for(const key in agreements){if(agreements.hasOwnProperty(key)){agreements[key].obj.prop('checked',agreements[key].checked);agreements[key].obj.closest('.'+instance._objPrefix+'division').find('.'+instance._objPrefix+'readmore_body').slideToggle()}}},popupApplyMisc:function(instance){const inputs=instance.popup.form.find(instance._inputAllMask);console.log('js input mask: '+(typeof $.fn.inputmask!=='undefined'));if(typeof $.fn.inputmask!=='undefined'){let input_masked_items;input_masked_items=inputs.filter('input[type="tel"], input[data-field-type="phone"], .jsm_phone');const phones_mask=instance.settings.input.regex_table.inputmask.phone;console.log('js input mask || masked items [phone]: ');console.log(input_masked_items);input_masked_items.inputmask({mask:phones_mask,greedy:!1,definitions:{'#':{validator:"[0-9]",cardinality:1}},'autoUnmask':!0});input_masked_items=inputs.filter('input[type="email"], input[data-field-type="email"], .jsm_email');console.log('js input mask || masked items [email]: ');console.log(input_masked_items);input_masked_items.inputmask({alias:'email',})}},input_checkbox_check_all_status:function(instance){if(instance.settings.input.check_all_agreements.obj!==null){let all_checked=!0;for(let i=0;i<instance.settings.input.agreements.length;i++){if(!instance.settings.input.agreements[i].obj.prop('checked')){all_checked=!1}}
            instance.settings.input.check_all_agreements.obj.prop('checked',all_checked).trigger('change',[!0])}},SendData:function(instance,options){let status={success:!1,message:'SendData: Error (Default)'};const defaults={url:instance.settings.api.url,api_custom:instance.settings.api.custom,data:instance.popup.form.serialize(),data_dictionary:instance.settings.input.data_dictionary,type:instance.settings.data.form_method,success_param:instance.settings.api.param.success,return_param:instance.settings.api.param.message,status_sending_text:instance.settings.text_vars.status_sending,send_headers:instance.settings.data.send_headers};const settings=$.extend(!0,{},defaults,options);instance._methods.StatusClear(instance);const validated_fields=instance._methods.ValidateForm(instance,instance.settings.input.fields);const validated_agreements=instance._methods.ValidateForm(instance,instance.settings.input.agreements);const validated=validated_fields&&validated_agreements;if(validated){console.log('Validation successful');console.log('Attempting to send data...');instance._methods.StatusClear(instance);instance._methods.StatusAdd(instance,settings.status_sending_text,{});if(instance.settings.data.add_utm_params){const unique_utm_params=instance._methods.ArrayGetDistinct(settings.api_custom,instance._methods.URLGetUTMs(instance.settings.data.utm_params_dictionary),['name']);settings.api_custom=$.merge(settings.api_custom,unique_utm_params)}
            status=instance._methods.SendDataAjax(instance,settings)}else{status={success:!1,message:'SendData: Error (Validation)'}}
            return status},SendDataAjax:function(instance,options){let status={success:!1,message:'SendDataAjax: Error (Default)'};const defaults={url:'/',type:'POST',api_custom:[],data:'',data_dictionary:{},success_param:{name:'result',value:'success'},return_param:'message',send_headers:!0,};const settings=$.extend(!0,{},defaults,options);if(settings.api_custom){const api_custom_length=settings.api_custom.length;let custom_data_string='';if(settings.data.length>0){custom_data_string+='&'}
            for(let i=0;i<api_custom_length;i++){custom_data_string+=settings.api_custom[i].name+'='+settings.api_custom[i].value;if(i<api_custom_length-1){custom_data_string+='&'}}
            settings.data+=encodeURI(custom_data_string)}
            const data_dictionary_keys=Object.keys(settings.data_dictionary);for(let i=0;i<data_dictionary_keys.length;i++){const regex=settings.data_dictionary[data_dictionary_keys[i]];console.log(data_dictionary_keys[i]+' > '+regex);settings.data=settings.data.replace(data_dictionary_keys[i],regex)}
            console.log(settings);if(instance.settings.status.ajax_processing){status={success:!1,message:'SendDataAjax: Error (Processing...)'}}else{instance.settings.status.ajax_processing=!0;status={success:!0,message:'SendDataAjax: Success (Got into ajax)'};if(settings.send_headers){$.ajaxSetup({headers:{'Content-Type':'application/x-www-form-urlencoded; charset=UTF-8','X-Requested-With':'XMLHttpRequest'}})}
                $.ajax({url:settings.url,type:settings.type,data:settings.data,enctype:'multipart/form-data',dataType:'json',processData:!1,success:function(data){let response_success=!1;let return_message;console.log(data);if(data[settings.return_param]){if($.isArray(data[settings.return_param])||(data[settings.return_param]!==null&&typeof data[settings.return_param]==='object')){for(let index in data[settings.return_param]){console.log(data[settings.return_param][index])}}
                        console.log('API status: '+data.status);console.log('API message: ');console.log(data[settings.return_param])}
                        if($.isArray(data[settings.return_param])){return_message=data[settings.return_param].join(', ')}else{return_message=data[settings.return_param]}
                        console.log(return_message);if(data[settings.success_param.name]){if(data[settings.success_param.name]===settings.success_param.value){status={success:!0,message:'Success (API x:200)'};response_success=!0}else{response_success=!1}}else{response_success=!1}
                        if(response_success){if(settings.callback.success.function&&$.isFunction(settings.callback.success.function)){settings.callback.success.function.apply(settings.callback.success.this,settings.callback.success.parameters)}
                            if(instance.settings.callbacks.onSend.success.function&&$.isFunction(instance.settings.callbacks.onSend.success.function)){instance.settings.callbacks.onSend.success.function.apply(instance.settings.callbacks.onSend.success.this,[$.extend(!0,{},data,instance.settings.callbacks.onSend.success.parameters)])}}else{if(settings.callback.error.function&&$.isFunction(settings.callback.error.function)){settings.callback.error.function.apply(settings.callback.error.this,settings.callback.error.parameters)}
                            if(instance.settings.callbacks.onSend.error.function&&$.isFunction(instance.settings.callbacks.onSend.error.function)){instance.settings.callbacks.onSend.error.function.apply(instance.settings.callbacks.onSend.error.this,[$.extend(!0,{},data,instance.settings.callbacks.onSend.error.parameters)])}
                            if(instance.settings.status.response_from_api_visible&&return_message){instance._methods.StatusAdd(instance,return_message,{style:'error'})}}
                        instance.settings.status.ajax_processing=!1},error:function(data){console.log('API status: '+data.status);console.log('API message: ');console.log(data[settings.return_param]);status={success:!1,message:'Error (API x:0)'};instance.settings.status.ajax_processing=!1;if(settings.callback.error.function&&$.isFunction(settings.callback.error.function)){settings.callback.error.function.apply(settings.callback.error.this,settings.callback.error.parameters)}
                        if(instance.settings.callbacks.onSend.error.function&&$.isFunction(instance.settings.callbacks.onSend.error.function)){instance.settings.callbacks.onSend.error.function.apply(instance.settings.callbacks.onSend.error.this,instance.settings.callbacks.onSend.error.parameters)}}})}
            return status},StatusAdd:function(instance,_message,options){const defaults={fade_duration:300,style:''};const settings=$.extend({},defaults,options);let message=$('<p></p>');message.text(_message);message.appendTo(instance.popup.footer);message.hide();if(settings.style==='success'){instance._methods.StatusClearStyle(instance);instance.popup.footer.addClass('success')}else if(settings.style==='error'){instance._methods.StatusClearStyle(instance);instance.popup.footer.addClass('error')}
            message.fadeIn(settings.fade_duration)},StatusClearStyle:function(instance){instance.popup.footer.removeClass('success error')},StatusClear:function(instance){instance._methods.StatusClearStyle(instance);instance.popup.footer.empty()},TogglePopup:function(instance,options){if(instance.settings.status.button_disabled){return}
            if(instance.settings.status.popup_hidden){instance._methods.ShowPopup(instance,options)}else{instance._methods.HidePopup(instance,options)}},ShowPopup:function(instance,options){if(instance.settings.status.button_disabled){return}
            const defaults={fade_duration:300,};const settings=$.extend({},defaults,options);if(instance.settings.appearance.overflown_overlay){instance.html.addClass('overflown')}
            instance.popup.overlay.fadeIn(settings.fade_duration);instance.popup.form.find(instance._inputAllMask).first().focus();instance.button.obj.addClass('hide');instance.settings.status.popup_hidden=!1;if(instance.settings.callbacks.onShow.function&&$.isFunction(instance.settings.callbacks.onShow.function)){instance.settings.callbacks.onShow.function.apply(instance.settings.callbacks.onShow.this,[$.extend(!0,{},instance,instance.settings.callbacks.onShow.parameters)])}},HidePopup:function(instance,options){if(instance.settings.status.button_disabled){return}
            const defaults={fade_duration:300,};const settings=$.extend({},defaults,options);if(instance.settings.appearance.overflown_overlay){instance.html.removeClass('overflown')}
            instance.popup.overlay.fadeOut(settings.fade_duration,function(){instance._methods.ResetInput(instance,{clear_status_only:!0});instance._methods.StatusClear(instance)});instance.button.obj.removeClass('hide');instance.settings.status.popup_hidden=!0;if(instance.settings.callbacks.onHide.function&&$.isFunction(instance.settings.callbacks.onHide.function)){instance.settings.callbacks.onHide.function.apply(instance.settings.callbacks.onHide.this,[$.extend(!0,{},instance,instance.settings.callbacks.onHide.parameters)])}},CollapsePopupBodyToggle:function(instance,options){const defaults={slide_duration:300,action:'toggle',};const settings=$.extend({},defaults,options);switch(settings.action){case 'toggle':if(instance.settings.status.popup_body_collapsed){instance.popup.body.slideDown(settings.slide_duration);instance.settings.status.popup_body_collapsed=!1}else{instance.popup.body.slideUp(settings.slide_duration);instance.settings.status.popup_body_collapsed=!0}
            break;case 'show':instance.popup.body.slideDown(settings.slide_duration);instance.settings.status.popup_body_collapsed=!1;break;case 'hide':instance.popup.body.slideUp(settings.slide_duration);instance.settings.status.popup_body_collapsed=!0;break;default:break}},DisableButton:function(instance,input){instance.settings.status.button_disabled=!!input},ValidateField:function(instance,_field,options){const defaults={};const settings=$.extend({},defaults,options);const field=_field;const $this=field.obj;let is_valid=!0;if(field.type==='checkbox'){if(field.required===!0){if(!$this.prop('checked')){is_valid=!1}}}
        else if(field.type==='select'){}
        else{if(field.required===!0||$this.val()!==''){const regex_table=instance.settings.input.regex_table;if(field.data_field_type&&field.data_field_type in regex_table){const regex=regex_table[field.data_field_type];if(!regex.test($this.val())){is_valid=!1}}else{is_valid=!1}}}
            return{is_valid:is_valid,field:field}},ValidateForm:function(instance,_fields,options){const defaults={append_status:!0,focus_first_wrong:!0,fade_duration:300,clear_status_only:!1};const settings=$.extend({},defaults,options);const fields=_fields;let is_valid=!0;let wrong_inputs=[];for(let i=0;i<fields.length;i++){const field=fields[i];const field_valid=instance._methods.ValidateField(instance,field);const $this=field.obj;const $this_container=$this.closest('.input');const old_obj=$this_container.find('.'+instance._objPrefix+'status');if(settings.append_status){old_obj.remove()}else{old_obj.fadeOut(settings.fade_duration,function(){old_obj.remove()})}
            if(settings.clear_status_only){$this.removeClass('correct-input');$this_container.removeClass('correct-input');$this.removeClass('wrong-input');$this_container.removeClass('wrong-input')}else{if(field_valid.is_valid){$this.removeClass('wrong-input');$this_container.removeClass('wrong-input');$this.addClass('correct-input');$this_container.addClass('correct-input')}else{$this.removeClass('correct-input');$this_container.removeClass('correct-input');$this.addClass('wrong-input');$this_container.addClass('wrong-input');wrong_inputs.push({field:field,message:''});if(settings.append_status){const $wrong_input_obj=$('<span class="'+instance._objPrefix+'status"></span>');$wrong_input_obj.text(instance.settings.text_vars.wrong_input_text);$wrong_input_obj.hide();$wrong_input_obj.appendTo($this_container);$wrong_input_obj.fadeIn(settings.fade_duration)}
                is_valid=!1}}}
            if(settings.focus_first_wrong&&wrong_inputs.length>0){wrong_inputs=instance._methods.objSortByPositionInDOM(wrong_inputs,'field','obj');wrong_inputs[0].field.obj.focus()}
            return is_valid},SendDataReturn:function(instance,options){const defaults={reset_input:!0,message:'',style:'',};const settings=$.extend({},defaults,options);if(settings.reset_input){instance._methods.ResetInput(instance,{clear_status_only:!0})}
            instance._methods.StatusClear(instance);instance._methods.StatusAdd(instance,settings.message,{style:settings.style})},ResetInput:function(instance,options){const defaults={clear_status_only:!1,};const settings=$.extend({},defaults,options);const form=instance.popup.form;form[0].reset();instance._methods.ValidateForm(instance,instance.settings.input.fields,{append_status:!1,focus_first_wrong:!1,clear_status_only:settings.clear_status_only});instance._methods.ValidateForm(instance,instance.settings.input.agreements,{append_status:!1,focus_first_wrong:!1,clear_status_only:settings.clear_status_only})},formatData:function(input){const _input=input;const input_length=_input.length;let output='';if(_input){output+=' ';if(input.constructor===Array){for(let i=0;i<input_length;i++){output+='data-'+_input[i][0]+'='+_input[i][1]+' '}
            if(output[output.length-1]===' '){output=output.slice(0,-1)}}else{output+='data-'+_input}}
            return output},formatDynamicAttributes:function(collection){const _collection=collection;for(let i=0;i<_collection.length;i++){const attributes=_collection[i].attributes;let formatted='';for(let x=0;x<attributes.length;x++){formatted+=attributes[x].key+'="';formatted+=attributes[x].value;formatted+='" '}
            if(formatted.length>0&&formatted[formatted.length-1]===' '){formatted=formatted.slice(0,-1)}
            _collection[i].formatted=formatted}
            return _collection},URLGetParams:function(url){if(typeof url==='undefined'){url=window.location.href}
            let request={};const qIndex=url.indexOf('?');if(qIndex===-1){return undefined}
            const pairs=url.substring(qIndex+1).split('&');for(let i=0;i<pairs.length;i++){if(!pairs[i])
                continue;const pair=pairs[i].split('=');request[decodeURIComponent(pair[0])]=decodeURIComponent(pair[1])}
            return request},URLGetUTMs:function(utm_params_dictionary){const url_params=this.URLGetParams();let utm_params=[];for(const key in url_params){if(url_params.hasOwnProperty(key)&&(utm_params_dictionary.indexOf(key)>-1)){utm_params.push({name:key,value:url_params[key]})}}
            return utm_params},ArrayGetDistinct:function(array_1,array_2,param_names){let unique_dictionary={};let distinct=[];for(const param in param_names){if(param_names.hasOwnProperty(param)){for(const key in array_1){if(array_1.hasOwnProperty(key)&&array_1[key].hasOwnProperty(param_names[param])){if(!unique_dictionary.hasOwnProperty(param_names[param])){unique_dictionary[param_names[param]]=[]}
            unique_dictionary[param_names[param]].push(array_1[key][param_names[param]])}}}}
            for(const param in param_names){if(param_names.hasOwnProperty(param)){for(const key in array_2){if(array_2.hasOwnProperty(key)&&array_2[key].hasOwnProperty(param_names[param])){if(unique_dictionary[param_names[param]].indexOf(array_2[key][param_names[param]])===-1){distinct.push(array_2[key])}}}}}
            return distinct},objSortByPositionInDOM:function(input,attr,attr2){const _input=input;let output;if(attr&&attr2){output=_input.sort(function(a,b){if(a[attr][attr2][0]===b[attr][attr2][0])return 0;if(!a[attr][attr2][0].compareDocumentPosition){return a[attr][attr2][0].sourceIndex-b[attr][attr2][0].sourceIndex}
            if(a[attr][attr2][0].compareDocumentPosition(b[attr][attr2][0])&2){return 1}
            return-1})}
        else if(attr){output=_input.sort(function(a,b){if(a[attr][0]===b[attr][0])return 0;if(!a[attr][0].compareDocumentPosition){return a[attr][0].sourceIndex-b[attr][0].sourceIndex}
            if(a[attr][0].compareDocumentPosition(b[attr][0])&2){return 1}
            return-1})}else{output=_input.sort(function(a,b){if(a[0]===b[0])return 0;if(!a[0].compareDocumentPosition){return a[0].sourceIndex-b[0].sourceIndex}
            if(a[0].compareDocumentPosition(b[0])&2){return 1}
            return-1})}
            return output},};$.fn[pluginName]=function(options){let instances=[];this.each(function(){if(!$.data(this,"plugin_"+pluginName)){const instance=new Plugin(this,options);$.data(this,"plugin_"+pluginName,instance);instances.push(instance)}
        if(typeof options==='string'){const args=Array.prototype.slice.call(arguments,1);data[options].apply(data,args)}});if(instances.length===1){return instances[0]}
        return null}})(jQuery,window,document)